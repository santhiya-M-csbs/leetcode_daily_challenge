/** 872. Leaf-Similar Trees
Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.

For example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).

Two binary trees are considered leaf-similar if their leaf value sequence is the same.

Return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.


Input: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]
Output: true

**/





void leaf(struct TreeNode* root, int* arr, int* index) {
    if (root == NULL) return;

    leaf(root->left, arr, index);
    if (root->left == NULL && root->right == NULL) {
        arr[(*index)++] = root->val;
    }
    leaf(root->right, arr, index);
}

int leafSimilar(struct TreeNode* root1, struct TreeNode* root2) {
    int arr1[1000], arr2[1000]; 
    int index1 = 0, index2 = 0;

    leaf(root1, arr1, &index1);
    leaf(root2, arr2, &index2);

    if (index1 != index2) return 0;

    for (int i = 0; i < index1; i++) {
        printf("%d %d\n", arr1[i], arr2[i]);
        if (arr1[i] != arr2[i]) return 0;
    }
    return 1;
}





/**
Explaination:

void leaf(struct TreeNode* root, int* arr, int* index) {
    if (root == NULL) return;
}

This function leaf is a recursive function that traverses a binary tree and stores the values of its leaf nodes in an array arr.
The index pointer is used to keep track of the current index in the array.

--------------------------------------------------------------------------------------------------------------------------------------

leaf(root->left, arr, index);

Recursively call leaf for the left subtree of the current node.

---------------------------------------------------------------------------------------------------------------------------------------

if (root->left == NULL && root->right == NULL) {
        arr[(*index)++] = root->val;
    }

If the current node is a leaf (both left and right children are NULL), add its value to the array arr and increment the index.

-----------------------------------------------------------------------------------------------------------------------------------------

leaf(root->right, arr, index);

Recursively call leaf for the right subtree of the current node.

-----------------------------------------------------------------------------------------------------------------------------------------

int leafSimilar(struct TreeNode* root1, struct TreeNode* root2) {
    int arr1[1000], arr2[1000]; 
    int index1 = 0, index2 = 0;
}

Initialize two arrays arr1 and arr2 to store the leaf node values of the two trees, and two indices index1 and index2 
to keep track of the current index in each array.

-----------------------------------------------------------------------------------------------------------------------------------------

 leaf(root1, arr1, &index1);
 leaf(root2, arr2, &index2);

Call the leaf function for both root1 and root2 to populate the arrays with leaf node values.

------------------------------------------------------------------------------------------------------------------------------------------

if (index1 != index2) return 0;

If the number of leaf nodes in the two trees is not equal, return 0 (indicating the trees are not leaf-similar).

--------------------------------------------------------------------------------------------------------------------------------------------

    for (int i = 0; i < index1; i++) {
        printf("%d %d\n", arr1[i], arr2[i]);
        if (arr1[i] != arr2[i]) return 0;
    }

Iterate through the arrays and print the corresponding leaf node values for debugging purposes. If any values are not equal, return 0.

----------------------------------------------------------------------------------------------------------------------------------------------

    return 1;

If all leaf node values are equal, return 1 (indicating the trees are leaf-similar).

------------------------------------------------------------------------------------------------------------------------------------------------


**/


